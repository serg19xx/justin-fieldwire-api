name: Deploy to Production (Shared Hosting)

on:
  push:
    branches: [ main, production ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, zip
        
    - name: Install Composer
      uses: php-actions/composer@v1
        
    - name: Clear Composer cache and install production dependencies
      run: |
        # Clear Composer cache to avoid conflicts
        composer clear-cache --no-interaction
        
        # Install only production dependencies (this will automatically exclude dev dependencies)
        composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist
        
        # Verify installation
        echo "Verifying Composer installation..."
        composer show --installed | head -20
        echo "✅ Composer installation completed"
        
    - name: Setup production environment
      run: |
        echo "${{ secrets.ENV_FILE }}" > .env
        echo "Production environment configured from ENV_FILE secret"
        
    - name: Create required directories
      run: |
        mkdir -p logs
        mkdir -p public/uploads/avatars
        chmod 755 logs
        chmod 755 public/uploads
        chmod 755 public/uploads/avatars
        
    - name: Run basic checks
      run: |
        echo "Running basic checks..."
        
        # Check if essential files exist
        if [ ! -f "src/Bootstrap/Application.php" ]; then
          echo "❌ Application.php not found"
          exit 1
        fi
        
        if [ ! -f "public/index.php" ]; then
          echo "❌ index.php not found"
          exit 1
        fi
        
        echo "✅ Basic checks passed"
        
    - name: Check code structure
      run: |
        echo "Checking code structure..."
        
        # Count PHP files
        php_files=$(find src -name "*.php" | wc -l)
        echo "Found $php_files PHP files in src/"
        
        # Check if controllers exist
        if [ -d "src/Controllers" ]; then
          controller_count=$(find src/Controllers -name "*.php" | wc -l)
          echo "Found $controller_count controllers"
        fi
        
        echo "✅ Code structure check passed"
        
    - name: Create deployment package
      run: |
        zip -r fieldwire-api-production.zip . \
          -x "*.git*" \
          -x "tests/*" \
          -x "scripts/*" \
          -x "docs/*" \
          -x "*.md" \
          -x "nginx.conf" \
          -x "env.development" \
          -x "env.example" \
          -x "logs/*" \
          -x ".env"
        echo "Deployment package created: fieldwire-api-production.zip"
        
    - name: Deploy to production via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./
        server-dir: ./public_html/
        exclude: |
          **/.git*
          **/tests/
          **/scripts/
          **/docs/
          **/*.md
          **/nginx.conf
          **/env.development
          **/env.example
          **/logs/
          **/.env
        dangerous-clean-slate: false
        
    - name: Deploy .env file separately
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./
        server-dir: ./public_html/
        dangerous-clean-slate: false
        
    - name: Set proper permissions
      run: |
        echo "Setting permissions on server..."
        # This will be handled by the hosting provider
        
    - name: Health check
      run: |
        echo "Waiting for deployment to complete..."
        sleep 30
        
        echo "Testing production endpoints..."
        
        # Test health endpoint
        if curl -f -s "https://fieldwire.medicalcontractor.ca/api/v1/health" > /dev/null; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          exit 1
        fi
        
        # Test Swagger UI
        if curl -f -s "https://fieldwire.medicalcontractor.ca/docs" > /dev/null; then
          echo "✅ Swagger UI accessible"
        else
          echo "❌ Swagger UI not accessible"
          exit 1
        fi
        
        echo "🎉 Deployment successful!"
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "🚀 Deployment to production completed!"
        echo "🌐 Production URL: https://fieldwire.medicalcontractor.ca"
        echo "📚 Swagger UI: https://fieldwire.medicalcontractor.ca/docs"
        echo "🔍 Health Check: https://fieldwire.medicalcontractor.ca/api/v1/health"
        echo ""
        echo "📝 Note: Health checks might fail on first deployment"
        echo "This is normal and will resolve after server restart"
        echo ""
        echo "✅ Deployment package uploaded successfully!"
